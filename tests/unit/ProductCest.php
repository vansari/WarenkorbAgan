<?php


namespace App\Tests\unit;

use App\Entity\Product;
use App\Tests\FunctionalTester;
use App\Tests\UnitTester;
use Codeception\Test\Unit;
use Doctrine\ORM\EntityManagerInterface;

class ProductCest extends Unit
{
    public UnitTester $tester;
    private EntityManagerInterface $em;

    public function _before()
    {
        parent::_before(); // TODO: Change the autogenerated stub
        $this->em = $this->getModule('Doctrine2')->em;
    }

    // tests
    public function createProduct(): void
    {
        $product = new Product();
        $product->setName('Apple AirPods');
        $product->setPrice(249.99);

        $this->em->persist($product);
        $this->em->flush();

        $this->assertNotEmpty($product->getId());
        $this->tester->assertEquals(
            'Apple AirPods',
            $product->getName()
        );
        $this->tester->seeInRepository(Product::class, ['name' => 'Apple AirPods']);
    }

    public function fetchProduct(): void
    {
        $id = $this->tester->haveInRepository(Product::class, ['name' => 'Macintosh', 'price' => 1500]);
        $product = $this->em->find(Product::class, $id);
        $this->tester->assertEquals($id, $product->getId());
    }

    public function updateProduct(UnitTester $I): void
    {
        $id = $this->tester->haveInRepository(Product::class, ['name' => 'Macintosh', 'price' => 1500]);
        $product = $this->em->find(Product::class, $id);
        $this->tester->assertEquals($id, $product->getId());
        $product->setName('Apple Macintosh');
        $this->em->persist($product);
        $this->em->flush();
        $this->tester->assertEquals('Apple Macintosh', $product->getName());
        $this->tester->seeInRepository(Product::class, ['name' => 'Apple Macintosh']);
        $this->tester->dontSeeInRepository(Product::class, ['name' => 'Macintosh']);
    }

    public function deleteProduct(FunctionalTester $I): void
    {
        $id = $this->tester->haveInRepository(Product::class, ['name' => 'Macintosh', 'price' => 1500]);
        $product = $this->em->find(Product::class, $id);
        $this->tester->assertEquals($id, $product->getId());
        $this->em->remove($product);
        $this->em->flush();
        $this->tester->dontSeeInRepository(Product::class, ['id' => $id, 'name' => 'Macintosh']);
    }

    public function insertProductWillFailIfNameExists(FunctionalTester $I): void
    {
        $this->tester->haveInRepository(Product::class, ['name' => 'Macintosh', 'price' => 1500]);
        $this->tester->expectThrowable(
            \Exception::class,
            fn () => $this->em->persist((new Product())->setName('Macintosh')->setPrice(1500))
        );
    }
}
