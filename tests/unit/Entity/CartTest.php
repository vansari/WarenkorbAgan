<?php

declare(strict_types=1);

namespace App\Tests\unit\Entity;

use App\Entity\Cart;
use App\Entity\CartItem;
use App\Entity\Product;
use App\Tests\UnitTester;
use Codeception\Test\Unit;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityManagerInterface;

class CartTest extends Unit
{
    public UnitTester $tester;
    private EntityManagerInterface $em;
    private array $testProducts = [];
    private array $testItems = [];

    public function _before(): void
    {
        parent::_before(); // TODO: Change the autogenerated stub
        $this->em = $this->getModule('Doctrine2')->em;
        $this->testProducts = [];
        $this->testProducts['adidas'] = $this->tester->haveInRepository(
            Product::class,
            ['name' => 'Adidas Schuhe', 'price' => 199.99]
        );
        $this->testProducts['nike'] = $this->tester->haveInRepository(
            Product::class,
            ['name' => 'Nike Schuhe', 'price' => 299.99]
        );
        $this->testProducts['puma'] = $this->tester->haveInRepository(
            Product::class,
            ['name' => 'Puma Schuhe', 'price' => 99.99]
        );
        $this->testProducts['deich'] = $this->tester->haveInRepository(
            Product::class,
            ['name' => 'Deich Schuhe', 'price' => 9.99]
        );
        $this->testItems = [];
        $adidas = $this->em->find(Product::class, $this->testProducts['adidas']);
        $this->testItems['adidas'] = $this->tester->haveInRepository(
            CartItem::class,
            ['product' => $adidas, 'quantity' => 1]
        );
        $nike = $this->em->find(Product::class, $this->testProducts['nike']);
        $this->testItems['nike'] = $this->tester->haveInRepository(
            CartItem::class,
            ['product' => $nike, 'quantity' => 1]
        );
    }

    // tests
    public function testCreateCart(): void
    {
        /** @var CartItem $item */
        $item = $this->em->find(CartItem::class, $this->testItems['adidas']);
        $card = new Cart();
        $card->addItem($item);
        $this->assertNull($card->getCreatedAt());
        $this->assertNull($card->getUpdatedAt());

        $this->em->persist($card);
        $this->em->flush();

        $this->assertNotEmpty($card->getId());
        $this->tester->seeInRepository(Cart::class, ['id' => $card->getId()]);
    }

    public function testFetchCart(): void
    {
        /** @var CartItem $item */
        $item = $this->em->find(CartItem::class, $this->testItems['adidas']);
        $id = $this->tester->haveInRepository(Cart::class, ['items' => new ArrayCollection([$item])]);
        $cart = $this->em->find(Cart::class, $id);
        $this->tester->assertEquals($id, $cart->getId());
    }

    public function testUpdateCart(): void
    {
        /** @var CartItem $itemNike */
        $itemNike = $this->em->find(CartItem::class, $this->testItems['nike']);
        /** @var CartItem $item */
        $item = $this->em->find(CartItem::class, $this->testItems['adidas']);

        $cart = new Cart();
        $cart->addItem($item);

        $this->em->persist($cart);
        $this->em->flush();

        $this->tester->assertCount(1, $cart->getItems());
        $this->tester->assertNull($cart->getUpdatedAt());
        $this->tester->assertNotNull($cart->getCreatedAt());

        $cart->addItem($itemNike);
        $this->em->persist($cart);
        $this->em->flush();

        // Should be solved with EventSubscriber preUpdate
        // $this->tester->assertNotNull($cart->getUpdatedAt());
    }

    public function testDeleteCartItem(): void
    {
        $item = $this->em->find(CartItem::class, $this->testItems['adidas']);
        $id = $this->tester->haveInRepository(Cart::class, ['items' => new ArrayCollection([$item])]);
        /** @var Cart $cart */
        $cart = $this->em->find(Cart::class, $id);
        $this->em->remove($cart);
        $this->em->flush();
        $this->tester->dontSeeInRepository(Cart::class, ['id' => $id]);
    }

    public function testDoIncrementToExistingItemIfProductExists(): void
    {
        /** @var CartItem $item */
        $item = $this->em->find(CartItem::class, $this->testItems['adidas']);

        $cart = new Cart();
        $cart->addItem($item);

        $this->em->persist($cart);
        $this->em->flush();

        $this->tester->assertCount(1, $cart->getItems());
        $this->tester->assertNull($cart->getUpdatedAt());
        $this->tester->assertNotNull($cart->getCreatedAt());

        $item2 = new CartItem();
        /** @var Product $product */
        $product = $this->em->find(Product::class, $this->testProducts['adidas']);
        $item2->setProduct($product);
        $item2->setQuantity(3);
        $cart->addItem($item2);

        $this->em->persist($cart);
        $this->em->flush();

        $this->tester->assertCount(1, $cart->getItems());
        $item = $cart->getItems()[0];
        $this->tester->assertSame(4, $item->getQuantity());
    }

    public function testRemoveAllItems(): void
    {
        /** @var CartItem $item */
        $item = $this->em->find(CartItem::class, $this->testItems['adidas']);
        /** @var CartItem $item2 */
        $item2 = $this->em->find(CartItem::class, $this->testItems['nike']);

        $cart = new Cart();
        $cart->addItem($item)->addItem($item2);

        $this->em->persist($cart);
        $this->em->flush();
        $this->tester->assertCount(2, $cart->getItems());
        $cart->removeItems();
        $this->em->persist($cart);
        $this->em->flush();
        $this->tester->assertCount(0, $cart->getItems());
    }

    public function testGetTotalOfCart(): void
    {
        /** @var CartItem $item */
        $item = $this->em->find(CartItem::class, $this->testItems['adidas']);
        /** @var CartItem $item2 */
        $item2 = $this->em->find(CartItem::class, $this->testItems['nike']);

        $cart = new Cart();
        $cart->addItem($item);
        $this->tester->assertSame($item->getTotal(), $cart->getTotal());
        $cart->addItem($item2);
        $this->tester->assertSame($item->getTotal() + $item2->getTotal(), $cart->getTotal());
        $cart->removeItem($item);
        $this->tester->assertSame($item2->getTotal(), $cart->getTotal());
    }
}
